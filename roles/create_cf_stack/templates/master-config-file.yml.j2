#cloud-config

write_files:
  - path: /home/core/.docker/config.json
    owner: 'core:core'
    permissions: '0600'
    content: |
        {\"credsStore\": \"ecr-login\"}
  - path: /etc/profile.d/aws_credential.sh
    content: |
      export AWS_ACCESS_KEY_ID={{ aws_access_key }}
      export AWS_SECRET_ACCESS_KEY={{ aws_secret_key }}
  - path: /etc/systemd/system/docker.service.d/increase-ulimit.conf
    owner: core:core
    permissions: 0644
    content: |
      [Service]
      LimitMEMLOCK=infinity
      LimitNOFILE=infinity

  - path: /etc/systemd/system/etcd2.service.d/30-etcd_peers.conf
    permissions: 0644
    content: |
      [Service]
      EnvironmentFile=/etc/sysconfig/etcd-peers 

coreos:
  etcd2:
    advertise-client-urls: http://$private_ipv4:2379
    initial-advertise-peer-urls: http://$private_ipv4:2380
    listen-client-urls: http://0.0.0.0:2379
    listen-peer-urls: http://$private_ipv4:2380
    heartbeat-interval: 600
    election-timeout: 6000

  units:
    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Socket for the API

        [Socket]
        ListenStream=4243
        BindIPv6Only=both
        Service=docker.service

        [Install]
        WantedBy=sockets.target


    - name: etcd2.service
      command: stop
    - name: etcd-peers.service
      command: start
      content: |
        [Unit]
        Description=Write a file with the etcd peers that we should bootstrap to
        [Service]
        Restart=on-failure
        RestartSec=10
        ExecStartPre=/usr/bin/docker pull monsantoco/etcd-aws-cluster:latest
        ExecStartPre=/usr/bin/docker run --rm=true -v /etc/sysconfig/:/etc/sysconfig/ monsantoco/etcd-aws-cluster:latest
        ExecStart=/usr/bin/systemctl start etcd2

    - name: fleet.service
      command: start
    - name: docker.service
      drop-ins:
        - name: 10-docker_opts.conf
          content: |
            [Service]
            Restart=on-failure
            RestartSec=10
            Environment=\"DOCKER_OPTS=--cluster-store=etcd://localhost:2379 --cluster-advertise=$private_ipv4:4243\"
    - name: docker-swarm.service
      command: start
      content: |
        [Unit]
        Description=Swarm service
        After=docker.service

        [Service]
        Restart=on-failure
        RestartSec=10
        ExecStartPre=-/usr/bin/docker kill docker-swarm
        ExecStartPre=-/usr/bin/docker rm docker-swarm
        ExecStartPre=/usr/bin/docker pull swarm
        ExecStart=/usr/bin/docker run --restart=on-failure --name docker-swarm -p 4000:4000 -d swarm --experimental manage -H :4000 --replication --advertise $private_ipv4:4000 etcd://$private_ipv4:2379/swarm

    - name: docker-reschedule-start.service
      content: |
        [Unit]
        Description=Start any created docker containers that haven't properly started (docker swarm bug)

        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c '/usr/bin/docker -H tcp://localhost:4000 start $(/usr/bin/docker -H tcp://localhost:4000 ps -a -f status=created -q) | true'

        [Install]
        WantedBy=local.target

    - name: docker-reschedule-start.timer
      command: start
      content: |
        [Unit]
        Description=Run the docker start service every 5 minutes

        [Timer]
        OnCalendar=*:0/5

        [Install]
        WantedBy=local.target
