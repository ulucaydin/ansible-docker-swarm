{ "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "CoreOS cluster running swarm",

  "Mappings" : {
      "VpcCidrs" : {
        "eu-central-1" : { "vpc" : "10.203.0.0/16", "pubsubnet1" : "10.203.0.128/25", "pubsubnet2" : "10.203.1.128/25", "pubsubnet3" : "10.203.2.128/25", "privsubnet1" : "10.203.0.0/25", "privsubnet2" : "10.203.1.0/25", "privsubnet3" : "10.203.2.0/25" },
        "eu-west-1" : { "vpc" : "10.203.0.0/16", "pubsubnet1" : "10.203.0.128/25", "pubsubnet2" : "10.203.1.128/25", "pubsubnet3" : "10.203.2.128/25", "privsubnet1" : "10.203.0.0/25", "privsubnet2" : "10.203.1.0/25", "privsubnet3" : "10.203.2.0/25" },
        "us-east-1" : { "vpc" : "10.203.0.0/16", "pubsubnet1" : "10.203.0.128/25", "pubsubnet2" : "10.203.1.128/25", "pubsubnet3" : "10.203.2.128/25", "privsubnet1" : "10.203.0.0/25", "privsubnet2" : "10.203.1.0/25", "privsubnet3" : "10.203.2.0/25" },
        "us-west-1" : { "vpc" : "10.203.0.0/16", "pubsubnet1" : "10.203.0.128/25", "pubsubnet2" : "10.203.1.128/25", "pubsubnet3" : "10.203.2.128/25", "privsubnet1" : "10.203.0.0/25", "privsubnet2" : "10.203.1.0/25", "privsubnet3" : "10.203.2.0/25" },
        "us-west-2" : { "vpc" : "10.203.0.0/16", "pubsubnet1" : "10.203.0.128/25", "pubsubnet2" : "10.203.1.128/25", "pubsubnet3" : "10.203.2.128/25", "privsubnet1" : "10.203.0.0/25", "privsubnet2" : "10.203.1.0/25", "privsubnet3" : "10.203.2.0/25" }
      },

      "RegionMap" : {
          "us-east-1" : { "AMI" : "ami-e61d52f1"},
          "us-west-2" : { "AMI" : "ami-b0c21ad0" },
          "us-west-1" : { "AMI" : "ami-217d3441"}
      },
  },

  "Parameters" : {
    "InstanceType" : {
      "Type" : "String",
      "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
      "AllowedValues" : [
        "t2.nano","t2.micro","t2.small","t2.medium","t2.large","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","m3.medium",
        "m3.large","m3.xlarge","m3.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge",
        "c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge",
        "i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
      "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
      "Default" : "t2.nano"
    },

    "NodeClusterSize" : {
      "Type" : "Number",
      "Default" : "3",
      "MinValue" : "3",
      "MaxValue" : "12",
      "Description" : "Number of Swarm Node instances. Please set it a multiple of AZ count."
    },

    "MasterClusterSize" : {
      "Type" : "Number",
      "Default" : "3",
      "MinValue" : "3",
      "MaxValue" : "12",
      "Description" : "Number of Swarm Master instances. Please make it same as the number of AZs."
    },

    "DiscoveryURL" : {
      "Type" : "String",
      "Description" : "A unique etcd cluster discovery URL. Grab a new token from https://discovery.etcd.io/new?size=4",
      "Default" : ""
    },

    "AllowSSHFrom" : {
      "Type" : "String",
      "Description" : "The net block (CIDR) from which SSH and docker on the master are available.",
      "Default" : "0.0.0.0/0"
    },

    "KeyName" : {
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "Description" : "The name of an EC2 Key Pair to allow SSH access to the master.",
      "Default" : ""
    },

    "VpcAvailabilityZones" : {
      "Type" : "CommaDelimitedList",
      "Description" : "Comma-delimited list of three VPC availability zones in which nodes are created.",
      "Default" : ""
    },

    "MountPoint" : {
      "Description" : "The Linux mount point for the EFS volume",
      "Type": "String",
      "MinLength": "1",
      "Default": "/opt/mashape"
    }

  },

  "Resources" : {
    "Vpc" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "vpc" ] },
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "VPC"] ] } }
        ]
      }
    },

    "PubSubnetAz1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet1" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "PublicSubnet1"] ] } }
        ]
      }
    },

    "PubSubnetAz2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet2" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "PublicSubnet2"] ] } }
        ]
      }
    },

    "PubSubnetAz3" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet3" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "2", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "PublicSubnet3"] ] } }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "IGW"] ] } }
        ]
      }
    },

    "AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "RouteViaIgw" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc"}
      }
    },

    "PublicRouteViaIgw" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteViaIgw" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PubSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz1" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "PubSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz2" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "PubSubnet3RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz3" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "PrivateSubnetAz1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "privsubnet1" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "PrivateSubnet1"] ] } }
        ]
      }
    },

    "PrivateSubnetAz2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "privsubnet2" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "PrivateSubnet2"] ] } }
        ]
      }
    },

    "PrivateSubnetAz3" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "privsubnet3" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "2", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "PrivateSubnet3"] ] } }
        ]
      }
    },

    "PrivateRouteTableAz1" : {
      "DependsOn" : ["Vpc"],
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" }
      }
    },

    "PrivateRouteTableAz2" : {
      "DependsOn" : ["Vpc"],
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" }
      }
    },

    "PrivateRouteTableAz3" : {
      "DependsOn" : ["Vpc"],
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" }
      }
    },

    "PrivateSubnetAz1RouteTableAssociation" : {
      "DependsOn" : ["PrivateSubnetAz1", "PrivateRouteTableAz1"],
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnetAz1" },
        "RouteTableId" : { "Ref" : "PrivateRouteTableAz1" }
      }
    },

    "PrivateSubnetAz2RouteTableAssociation" : {
      "DependsOn" : ["PrivateSubnetAz2", "PrivateRouteTableAz2"],
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnetAz2" },
        "RouteTableId" : { "Ref" : "PrivateRouteTableAz2" }
      }
    },

    "PrivateSubnetAz3RouteTableAssociation" : {
      "DependsOn" : ["PrivateSubnetAz3", "PrivateRouteTableAz3"],
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnetAz3" },
        "RouteTableId" : { "Ref" : "PrivateRouteTableAz3" }
      }
    },

    "PrivateRouteAz1" : {
      "DependsOn" : ["PrivateRouteTableAz1", "NAT"],
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTableAz1" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "NAT" }
      }
    },

    "PrivateRouteAz2" : {
      "DependsOn" : ["PrivateRouteTableAz2", "NAT"],
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTableAz2" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "NAT" }
      }
    },

    "PrivateRouteAz3" : {
      "DependsOn" : ["PrivateRouteTableAz3", "NAT"],
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTableAz3" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "NAT" }
      }
    },

    "NatSecurityGroup" : {
      "DependsOn" : ["Vpc"],
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "NAT Security Group",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : "0.0.0.0/0"
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "3389",
          "ToPort" : "3389",
          "CidrIp" : "0.0.0.0/0"
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "2379",
          "ToPort" : "2379",
          "CidrIp" : "0.0.0.0/0"
        },{
          "IpProtocol": "icmp",
          "FromPort": "-1",
          "ToPort": "-1",
          "CidrIp" : "10.203.0.0/16"
        },{
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22",
          "CidrIp" : "10.203.0.0/16"
        },{
          "IpProtocol": "tcp",
          "FromPort": "3389",
          "ToPort": "3389",
          "CidrIp" : "10.203.0.0/16"
        },{
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp" : "10.203.0.0/16"
        },{
          "IpProtocol": "tcp",
          "FromPort": "443",
          "ToPort": "443",
          "CidrIp" : "10.203.0.0/16"
        }],
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "NAT-SG" ] ] } }
        ]
      }
    },

    "NAT" : {
      "DependsOn" : ["PubSubnetAz1", "NatSecurityGroup"],
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : "t2.micro",
        "KeyName"  : { "Ref" : "KeyName" },
        "SourceDestCheck" : "false",
        "ImageId" : "ami-184dc970",
        "NetworkInterfaces" : [{
          "GroupSet"                 : [{ "Ref" : "NatSecurityGroup" }],
          "AssociatePublicIpAddress" : "true",
          "DeviceIndex"              : "0",
          "DeleteOnTermination"      : "true",
          "SubnetId"                 : { "Ref" : "PubSubnetAz1" }
        }],
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "NAT" ] ] } }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "yum update -y && yum install -y yum-cron && chkconfig yum-cron on"
        ]]}}
      }
    },

    "MasterSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Master CoreOS SecurityGroup",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "65535", "CidrIp": "10.203.0.0/16" },
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "AllowSSHFrom" } },
          { "IpProtocol" : "tcp", "FromPort" : "4000", "ToPort" : "4000", "CidrIp" : "0.0.0.0/0" },
        ],
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Master-SG" ] ] } }
        ]
      }
    },

    "NodeSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Node CoreOS SecurityGroup",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "AllowSSHFrom" } },
          { "IpProtocol" : "tcp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "10.203.0.0/16" },
          { "IpProtocol" : "udp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "10.203.0.0/16" }
        ],
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Node-SG" ] ] } }
        ]
      }
    },

    "MasterLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable communication with Swarm Masters and Etcd",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
        {
          "IpProtocol" : "tcp",
          "FromPort" : "0",
          "ToPort" : "65535",
          "CidrIp": "10.203.0.0/16"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "4000",
          "ToPort" : "4000",
          "CidrIp" : { "Ref" : "AllowSSHFrom" }
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "2379",
          "ToPort" : "2379",
          "CidrIp" : "0.0.0.0/0"
        }
      ],
        "SecurityGroupEgress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "4000",
          "ToPort" : "4000",
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "0",
          "ToPort" : "65535",
          "CidrIp": "10.203.0.0/16"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "2379",
          "ToPort" : "2379",
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "2375",
          "ToPort" : "2375",
          "CidrIp" : "0.0.0.0/0"
        }
      ]
      }
    },

    "NodeLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP/HTTPS access on port 80/443 to 80/8080",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "443",
          "ToPort" : "443",
          "CidrIp" : "0.0.0.0/0"
        } ],
        "SecurityGroupEgress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        } ]
      }
    },

    "NodeLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "LoadBalancerName" : {"Fn::Join" : ["-", ["node", { "Ref" : "Vpc" } ]]},
        "CrossZone": true,
        "SecurityGroups" : [ { "Ref" : "NodeLoadBalancerSecurityGroup" } ],
        "Subnets" : [{ "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" }, { "Ref" : "PubSubnetAz3" }],
        "Listeners" :
          [ {
            "LoadBalancerPort" : "80",
            "InstancePort" : "80",
            "Protocol" : "HTTP"
          }],
        "HealthCheck" : {
          "Target" : { "Fn::Join" : [ "", ["HTTP:80", "/health"]]},
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "3",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },

    "MasterLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "Scheme": "internal",
        "LoadBalancerName" : {"Fn::Join" : ["-", ["master", { "Ref" : "Vpc" } ]]},
        "CrossZone": true,
        "SecurityGroups" : [ { "Ref" : "MasterLoadBalancerSecurityGroup" } ],
        "Subnets" : [{ "Ref" : "PrivateSubnetAz1" }, { "Ref" : "PrivateSubnetAz2" }, { "Ref" : "PrivateSubnetAz3" }],
        "Listeners" :
          [ {
            "LoadBalancerPort" : "2379",
            "InstancePort" : "2379",
            "Protocol" : "TCP"
          },
          {
            "LoadBalancerPort" : "4000",
            "InstancePort" : "4000",
            "Protocol" : "TCP"
          }
        ],
        "HealthCheck" : {
          "Target" : { "Fn::Join" : [ "", ["HTTP:2379", "/health"]]},
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "3",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },

    "MasterLaunchConfiguration" : {
      "DependsOn" : [ "NAT" ],
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : "t2.small",
        "AssociatePublicIpAddress" : false,
        "KeyName" : { "Ref" : "KeyName"},
        "SecurityGroups" : [ { "Ref" : "MasterSecurityGroup"} ],
        "UserData" :  { "Fn::Base64" : {"Fn::Join" : [ "", ["{{ master_cloud_config }}"] ]} }
      }
    },

    "NodeLaunchConfiguration" : {
      "DependsOn" : [ "InternetGateway", "MasterAutoScalingGroup", "NAT" ],
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "InstanceType"},
        "AssociatePublicIpAddress" : false,
        "KeyName" : { "Ref" : "KeyName"},
        "SecurityGroups" : [ { "Ref" : "NodeSecurityGroup"} ],
        "UserData" :  { "Fn::Base64" : {"Fn::Join" : [ "", ["{{ minion_cloud_config }}"] ]} }
      }
    },

    "MasterAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" :
          [ { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "2", { "Ref" : "VpcAvailabilityZones" } ] } ],
        "VPCZoneIdentifier" : [ { "Fn::Join" : [",", [ { "Ref" : "PrivateSubnetAz1" }, { "Ref" : "PrivateSubnetAz2" }, { "Ref" : "PrivateSubnetAz3" } ] ] } ],
        "LaunchConfigurationName" : { "Ref" : "MasterLaunchConfiguration" },
        "LoadBalancerNames" : [ { "Ref" : "MasterLoadBalancer" } ],
        "MinSize" : "3",
        "MaxSize" : "12",
        "DesiredCapacity" : { "Ref" : "MasterClusterSize"},
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": "500",
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Master" ] ] }, "PropagateAtLaunch" : "true" }
        ]
      }
    },

    "NodeAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" :
          [ { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "2", { "Ref" : "VpcAvailabilityZones" } ] } ],
        "VPCZoneIdentifier" : [ { "Fn::Join" : [",", [ { "Ref" : "PrivateSubnetAz1" }, { "Ref" : "PrivateSubnetAz2" }, { "Ref" : "PrivateSubnetAz3" } ] ] } ],
        "LaunchConfigurationName" : { "Ref" : "NodeLaunchConfiguration" },
        "LoadBalancerNames" : [ { "Ref" : "NodeLoadBalancer" } ],
        "MinSize" : "3",
        "MaxSize" : "12",
        "DesiredCapacity" : { "Ref" : "NodeClusterSize"},
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Node" ] ] }, "PropagateAtLaunch" : "true" }
        ]
      }
    },

    "DataStorageFileSystem": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "PerformanceMode": "generalPurpose",
        "FileSystemTags": [
          {
            "Key": "Name",
            "Value": "SwarmDataStorage"
          }
        ]
      }
    },

    "EfsSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "EFS SecurityGroup",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "2049", "ToPort" : "2049", "CidrIp" : "10.203.0.0/16" }
        ],
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Storage-SG" ] ] } }
        ]
      }
    },

    "Az1MountTarget": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": { "Ref": "DataStorageFileSystem" },
        "SubnetId": { "Ref": "PubSubnetAz1" },
        "SecurityGroups": [ { "Ref": "EfsSecurityGroup" } ]
      }
    },

    "Az2MountTarget": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": { "Ref": "DataStorageFileSystem" },
        "SubnetId": { "Ref": "PubSubnetAz2" },
        "SecurityGroups": [ { "Ref": "EfsSecurityGroup" } ]
      }
    },

    "Az3MountTarget": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": { "Ref": "DataStorageFileSystem" },
        "SubnetId": { "Ref": "PubSubnetAz3" },
        "SecurityGroups": [ { "Ref": "EfsSecurityGroup" } ]
      }
    },

    "StorageNodeLaunchConfiguration": {
      "DependsOn" : [ "MasterAutoScalingGroup", "Az1MountTarget", "Az2MountTarget", "Az3MountTarget", "NAT" ],
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress" : false,
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups": [ { "Ref": "EfsSecurityGroup" }, { "Ref": "NodeSecurityGroup"} ],
        "UserData" :  { "Fn::Base64" : {"Fn::Join" : [ "", ["{{ storage_cloud_config }}"] ]} }
      }
    },

    "StorageNodeAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" :
          [ { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "2", { "Ref" : "VpcAvailabilityZones" } ] } ],
        "VPCZoneIdentifier" : [ { "Fn::Join" : [",", [ { "Ref" : "PrivateSubnetAz1" }, { "Ref" : "PrivateSubnetAz2" }, { "Ref" : "PrivateSubnetAz3" } ] ] } ],
        "LaunchConfigurationName" : { "Ref" : "StorageNodeLaunchConfiguration" },
        "MinSize" : "1",
        "MaxSize" : "3",
        "DesiredCapacity" : "3",
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Storage" ] ] }, "PropagateAtLaunch" : "true" }
        ]
      }
    },
  },




  "Outputs" : {

    "MasterDockerPs" : {
      "Description" : "Command to run a 'docker info' on the cluster master",
      "Value" : { "Fn::Join" : [ "", [ "docker -H tcp://", { "Fn::GetAtt" : [ "MasterLoadBalancer", "DNSName" ] }, ":4000 info" ] ] }
    },
    "MasterPublicDNS" : {
      "Description" : "ELB of Swarm and Etcd Masters",
      "Value" : { "Fn::GetAtt" : [ "MasterLoadBalancer", "DNSName" ] }
    },
    "NodeDNS" : {
      "Description" : "ELB of Swarm Nodes",
      "Value" : { "Fn::GetAtt" : [ "NodeLoadBalancer", "DNSName" ] }
    }
  }

}
